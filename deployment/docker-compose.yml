version: '1'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181"
    hostname: zookeeper
    container_name: zookeeper
    volumes:
      - /home/azureuser/zookeeper/data
  kafka:
    image: wurstmeister/kafka
    command: [start-kafka.sh]
    ports:
      - "9092:9092"
    hostname: kafka
    container_name: kafka
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1" # topic:partition:replicas
      KAFKA_ADVERTISED_HOST_NAME: stinky.westus3.cloudapp.azure.com # docker-machine ip
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://stinky.westus3.cloudapp.azure.com:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG_DIRS: /kafka/kafka-logs
      KAFKA_BROKER_ID: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /home/azureuser/kafka:/kafka/kafka-logs
    depends_on:
      - "zookeeper"
  db:
    image: mysql:8.0
    restart: always
    environment:
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'password'
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
      - '3306:3306'
    expose:
      - 3306
    container_name: database
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 20s
      retries: 30
    volumes:
      - my-db:/var/lib/mysql
    networks:
      - api.network

  nginx:
    image: nginx:latest
    volumes:
      - /home/azureuser/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - receiver
      - storage
      - audit_log
      - processing
      - dashboard
    container_name: nginx
    ports: 
      - '80:80'
    networks:
      - api.network
  dashboard:
    build:
      context: ../dashboard-ui
    container_name: dashboard
    depends_on:
      - storage
      - processing
      - kafka
    ports:
      - '3000'
    networks:
      - api.network
  health:
    build:
      context: ../health
    container_name: health
    hostname: health
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/health:/config/health
      - /home/azureuser/logs:/logs
    ports:
      - '8120'
    networks:
      - api.network
  audit_log:
    build:
      context: ../audit
    depends_on:
      - storage
    container_name: audit
    hostname: audit
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/audit_log:/config/audit_log
      - /home/azureuser/logs:/logs
    ports:
      - '8110'
    networks:
      - api.network

  processing:
    build:
      context: ../processing
    depends_on:
      - storage
    container_name: processing
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/processing:/config/processing
      - /home/azureuser/logs:/logs
      - processing-db:/data
    ports:
      - '8100'
    networks:
      - api.network

  receiver:
    build:
      context: ../receiver
    depends_on:
      - storage
    hostname: receiver
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/receiver:/config/receiver
      - /home/azureuser/logs:/logs
    ports:
      - '8080'
    networks:
      - api.network

  storage:
    build:
      context: ../storage
    depends_on:
      db:
        condition: service_healthy
    container_name: storage
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/storage:/config/storage
      - /home/azureuser/logs:/logs
    ports:
      - '8090'
    networks:
      - api.network
volumes:
  my-db: {}
  processing-db: {}
networks:
  api.network:
